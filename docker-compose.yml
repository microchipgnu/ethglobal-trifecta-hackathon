services:
  internal-app:
    build:
      context: .
      dockerfile: ./apps/internal-app/Dockerfile
    container_name: tradestream-internal-app
    env_file: .env
    ports:
      - "${INTERNAL_APP_PORT:-5173}:5173"
    restart: always
    networks:
      - dokploy-network
    links:
      - agent:agent
      - redis:redis
      - internal-api:internal-api
    depends_on:
      agent:
        condition: service_healthy
      redis:
        condition: service_started
      internal-api:
        condition: service_started
    labels:
      - traefik.enable=true
      - traefik.http.routers.internal-app.rule=Host(`internal-tradestream.${DOMAIN:-localhost}`)
      - traefik.http.routers.internal-app.entrypoints=websecure
      - traefik.http.routers.internal-app.tls.certResolver=letsencrypt
      - traefik.http.services.internal-app.loadbalancer.server.port=${INTERNAL_APP_PORT:-5173}

  internal-api:
    build:
      context: .
      dockerfile: ./apps/internal-api/Dockerfile
    container_name: tradestream-internal-api
    env_file: .env
    ports:
      - "${INTERNAL_API_PORT:-3030}:3030"
    restart: always
    networks:
      - dokploy-network
    links:
      - redis:redis
    depends_on:
      redis:
        condition: service_started
    labels:
      - traefik.enable=true
      - traefik.http.routers.internal-api.rule=Host(`api.tradestream.${DOMAIN:-localhost}`)
      - traefik.http.routers.internal-api.entrypoints=websecure
      - traefik.http.routers.internal-api.tls.certResolver=letsencrypt
      - traefik.http.services.internal-api.loadbalancer.server.port=${INTERNAL_API_PORT:-3030}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:${INTERNAL_API_PORT:-3030}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  agent:
    build:
      context: .
      dockerfile: ./apps/agent/Dockerfile
    container_name: tradestream-agent
    shm_size: 4g
    ports:
      - 8000:8000
      - 6080:6080
      - 8501:8501
      - 5900:5900
      - 8080:8080
    restart: always
    env_file: .env
    networks:
      - dokploy-network
    links:
      - redis:redis
      - internal-api:internal-api
    depends_on:
      redis:
        condition: service_started
      internal-api:
        condition: service_started
    labels:
      - traefik.enable=true
      - traefik.http.routers.computer-use-demo.rule=Host(`desktop.tradestream.${DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.computer-use-demo.entrypoints=websecure
      - traefik.http.routers.computer-use-demo.tls.certResolver=letsencrypt
      - traefik.http.services.computer-use-demo.loadbalancer.server.port=8080
      - traefik.http.routers.computer-use-demo-streamlit.rule=Host(`desktop-app.tradestream.${DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.computer-use-demo-streamlit.entrypoints=websecure
      - traefik.http.routers.computer-use-demo-streamlit.tls.certResolver=letsencrypt
      - traefik.http.services.computer-use-demo-streamlit.loadbalancer.server.port=8501
      - traefik.http.routers.computer-use-demo-vnc.rule=Host(`vnc.tradestream.${DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.computer-use-demo-vnc.entrypoints=websecure
      - traefik.http.routers.computer-use-demo-vnc.tls.certResolver=letsencrypt
      - traefik.http.services.computer-use-demo-vnc.loadbalancer.server.port=6080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:6080/vnc.html"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  streamer:
    build:
      context: .
      dockerfile: ./apps/streamer/Dockerfile
    shm_size: 2g
    container_name: tradestream-streamer
    restart: always
    env_file: .env
    networks:
      - dokploy-network
    links:
      - agent:agent
      - rtmp-server:rtmp-server
      - internal-app:internal-app
      - internal-api:internal-api
      - redis:redis
    depends_on:
      agent:
        condition: service_healthy
      rtmp-server:
        condition: service_started
      internal-app:
        condition: service_started
      internal-api:
        condition: service_started
      redis:
        condition: service_started

  rtmp-server:
    image: tiangolo/nginx-rtmp
    container_name: rtmp-server
    ports:
      - 1935:1935
    restart: always
    networks:
      - dokploy-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.rtmp.rule=Host(`rtmp.tradestream.${DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.rtmp.entrypoints=websecure
      - traefik.http.routers.rtmp.tls.certResolver=letsencrypt
      - traefik.http.services.rtmp.loadbalancer.server.port=1935

  redis:
    image: redis:alpine
    container_name: tradestream-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    env_file: .env
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - dokploy-network
    command: >
      sh -c "redis-server --appendonly yes 
      $([[ -n \"$REDIS_PASSWORD\" ]] && echo \"--requirepass $REDIS_PASSWORD\" || echo \"\")"
    labels:
      - traefik.enable=true
      - traefik.http.routers.redis.rule=Host(`redis.tradestream.${DOMAIN:-yourdomain.com}`)
      - traefik.http.routers.redis.entrypoints=websecure
      - traefik.http.routers.redis.tls.certResolver=letsencrypt
      - traefik.http.services.redis.loadbalancer.server.port=${REDIS_PORT:-6379}

volumes:
  redis-data:

networks:
  dokploy-network:
    external: true